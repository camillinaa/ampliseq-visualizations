theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
phyla_list
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
class(phyla_list)
str(phyla_list)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
str(phyla_list)
phyla_vector <- character(length = length(tree$tip.label))
phyla_vector <- character(length = length(tree$tip.label))
for (i in seq_along(tree$tip.label)) {
# Get the ASV ID from the tip label
asv_id <- tree$tip.label[i]
# Find the corresponding Phylum for this ASV from asv_species (assuming 'ASV_ID' is the matching column)
phylum <- asv_species$Phylum[asv_species$ASV_ID == asv_id]
# Assign the found phylum to the phyla_vector
phyla_vector[i] <- phylum
}
t1_coloured <- groupOTU(t1, phyla_vector, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
for (i in seq_along(tree$tip.label)) {
# Get the ASV ID from the tip label
asv_id <- tree$tip.label[i]
# Find the corresponding Phylum for this ASV from asv_species (assuming 'ASV_ID' is the matching column)
phylum <- asv_species$Phylum[asv_species$ASV_ID == asv_id]
# Assign the found phylum to the phyla_vector
phyla_vector[i] <- phylum
}
t1_coloured <- groupOTU(t1, phyla_vector, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
phyla_vector
phyla_list
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
data(iris)
rn <- paste0(iris[,5], "_", 1:150)
rownames(iris) <- rn
d_iris <- dist(iris[,-5], method="man")
tree_iris <- ape::bionj(d_iris)
grp <- list(setosa     = rn[1:50],
versicolor = rn[51:100],
virginica  = rn[101:150])
p_iris <- ggtree(tree_iris, layout = 'circular', branch.length='none')
groupOTU(p_iris, grp, 'Species') + aes(color=Species) +
theme(legend.position="right")
grp
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
tree$tip.label
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # change tip label to taxonomy
tree$tip.label
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "treatment1")] # compute mean for otu/treatment pair
heatmap <- dcast(heatmap, `#OTU ID` ~ treatment1, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap[`#OTU ID` %in% tree$ASV] # check that all OTUs in the heatmap are in the tree and vice versa
tree$ASV
heatmap[, 2:3] <- lapply(heatmap[, 2:3], as.numeric)
heatmap_matrix <- as.matrix(heatmap[, -1])
rownames(heatmap_matrix) <- heatmap$`#OTU ID`
circ <- ggtree(tree, layout = "circular", branch.length = 'none')
circ_heatmap <- gheatmap(circ, heatmap_matrix, offset=0, width=.2,
colnames_angle=95, colnames_offset_y = .25) +
scale_fill_gradient(low = "#C6D4F9", high = "#F1A7C2", name="Abundance")
circ_heatmap
tree$tip.label <- tree$ASV
circ <- ggtree(tree, layout = "circular", branch.length = 'none')
circ_heatmap <- gheatmap(circ, heatmap_matrix, offset=0, width=.2,
colnames_angle=95, colnames_offset_y = .25) +
scale_fill_gradient(low = "#C6D4F9", high = "#F1A7C2", name="Abundance")
circ_heatmap
ggsave("trees/tree_heatmap.pdf", width = 100, height = 100, units = "cm", limitsize = FALSE)
ggsave("trees/tree_phyla.pdf", width = 100, height = 100, units = "cm", limitsize = FALSE)
dada2_asv_tax = "ASV_tax.silva_138.tsv"
paste0("data/",dir,"/",dada2_asv_tax)
feature_tab = "feature-table.tsv" # this has the same name from ampliseq
dir = "rectal_cancer"
# Import libraries
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(ggtree)
# Set vars
dir = "pipeline_test"
#dada2_asv_tax = "ASV_tax.silva_138.tsv" # name changes depending on database used
dada2_asv_tax = "ASV_tax.gtdb_R07-RS207.tsv"
meta_filename = "Metadata.tsv"
condition_col = "treatment1"
metadata_id = "ID"
# Load Newick tree
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
# Load taxonomy_qza
meta <- fread(paste0("data/",dir,"/",meta_filename))
feature <- fread(paste0("data/",dir,"/feature-table.tsv"))
asv_species <- fread(paste0("data/",dir,"/",dada2_asv_tax))
asv_species[asv_species == ""] <- NA
asv_species$taxonomy <- apply(asv_species[, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")], 1, function(row) paste(na.omit(row), collapse = "; ")) # create taxonomy string
asv_species <- asv_species[asv_species$ASV_ID %in% tree$tip.label]
asv_species$Phylum[is.na(asv_species$Phylum)] <- "Unknown Phylum"
#
#   +----------------------------+
#   |  TREE 1 - Basic tree       |
#   +----------------------------+
#
# Change tip labels to ASV taxonomy
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # change tip label to taxonomy
# Colour tree by phylum
phyla_list <- list()
for (phylum in unique(asv_species$Phylum)) {
taxonomies <- asv_species$taxonomy[asv_species$Phylum == phylum]
phyla_list[[phylum]] <- taxonomies
}
# Create ggtree object
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
ggsave("trees/tree_phyla.pdf", plot = t1_coloured, width = 100, height = 100, units = "cm", limitsize = FALSE)
ggsave("trees/tree_phyla.pdf", width = 100, height = 100, units = "cm", limitsize = FALSE)
save_plot("trees/tree_phyla.pdf", t1_coloured)
save_plot("/home/camilla.callierotti/microbiome/tree_annotation_script", t1_coloured)
ggsave("/home/camilla.callierotti/microbiome/tree_annotation_script", width = 100, height = 100, units = "cm", limitsize = FALSE)
paste0(results_path,"tree_phyla.pdf")
results_path = "/home/camilla.callierotti/microbiome/tree_annotation_script/trees/"
paste0(results_path,"tree_phyla.pdf")
# Create heatmap dataframe (from feature table using ASVs for join)
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = metadata_id, all.x = TRUE) # merge with treatment
condition_col
metadata_id
feature_long
feature
feature
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = metadata_id, value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = metadata_id, all.x = TRUE) # merge with treatment
head(meta)
metadata_id
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = "ID", all.x = TRUE) # merge with treatment
names(meta)
names(feature_long)
meta$ID
feature_long$ID
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = metadata_id, value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = metadata_id, all.x = TRUE) # merge with treatment
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", metadata_id)] # compute mean for otu/treatment pair
metadata_id
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = "ID", all.x = TRUE) # merge with treatment
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = "ID", all.x = TRUE) # merge with treatment
feature_long
meta
merged_feature <- merge(feature_long, meta[, .("ID", condition_col)], by = "ID", all.x = TRUE) # merge with treatment
condition_col
meta
merged_feature <- merge(feature_long, meta[, .("ID", "treatment1")], by = "ID", all.x = TRUE) # merge with treatment
merged_feature <- merge(feature_long, meta[, .("ID", "treatment1")], by = "ID", all.x = TRUE) # merge with treatment
feature_long
meta
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
heatmap <- dcast(heatmap, `#OTU ID` ~ condition_col, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- dcast(heatmap, `#OTU ID` ~ treatment1, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- dcast(heatmap, "#OTU ID" ~ "treatment1", value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- dcast(heatmap, `#OTU ID` ~ condition_col, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
heatmap <- dcast(heatmap, `#OTU ID` ~ condition_col, value.var = "mean_abund", fill = 0) # reshape back to wide format
str(heatmap)
heatmap[duplicated(heatmap[, .(ID = `#OTU ID`, condition_col)]), ]
sapply(heatmap, length)
str(heatmap)
condition_col
heatmap <- dcast(heatmap, `#OTU ID` ~ abundance, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- dcast(heatmap, `#OTU ID` ~ "abundance", value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
heatmap <- dcast(heatmap, `#OTU ID` ~ mean_abund, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
heatmap
df2 <- as.data.frame(matrix(rnorm(39), ncol=3))
df2
df2 <- as.data.frame(matrix(rnorm(39), ncol=3))
rownames(df2) <- tree$tip.label
df2
View(df2)
nwk <- system.file("extdata", "sample.nwk", package="treeio")
test_tree <- read.tree(nwk)
df2 <- as.data.frame(matrix(rnorm(39), ncol=3))
rownames(df2) <- test_tree$tip.label
colnames(df2) <- LETTERS[1:3]
df2
class(df2)
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
head(merged_feature)
merged_feature_mean <- merged_feature[, .(mean_abund = mean(abundance)), by = .(ID, `#OTU ID`, treatment1)] # compute mean abundace for otu and treatment
View(merged_feature_mean)
merged_feature_mean <- merged_feature[, .(mean_abund = mean(abundance)), by = .(`#OTU ID`, treatment1)] # compute mean abundace for otu and treatment
heatmap <- dcast(merged_feature_mean, `#OTU ID` ~ treatment1, value.var = "mean_abund", fill = 0)
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
heatmap[`#OTU ID` %in% tree$ASV] # check that all OTUs in the heatmap are in the tree and vice versa
tree$ASV
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # change tip label to taxonomy
tree$tip.label <- tree$ASV
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # change tip label to taxonomy
heatmap[`#OTU ID` %in% tree$ASV] # check that all OTUs in the heatmap are in the tree and vice versa
heatmap
#heatmap[, 2:3] <- lapply(heatmap[, 2:3], as.numeric)
heatmap_matrix <- as.matrix(heatmap[, -1])
rownames(heatmap_matrix) <- heatmap$`#OTU ID`
heatmap_matrix
tree$tip.label <- tree$ASV
circ <- ggtree(tree, layout = "circular", branch.length = 'none')
circ_heatmap <- gheatmap(circ, heatmap_matrix, offset=0, width=.2,
colnames_angle=95, colnames_offset_y = .25) +
scale_fill_gradient(low = "#C6D4F9", high = "#F1A7C2", name="Abundance")
circ_heatmap
ggsave(paste0(results_path,"tree_heatmap.pdf"), plot = circ_heatmap, width = 100, height = 100, units = "cm", limitsize = FALSE)
horiz <- ggtree(tree) + theme_tree2()
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(ggtree)
horiz <- ggtree(tree) + theme_tree2()
horiz
tree <- tip_labels_to_taxonomy(tree, asv_species)
#!/usr/bin/env Rscript
#
#        _           _                             _   _        _
#       | |         | |                           | | (_)      | |
#  _ __ | |__  _   _| | ___   __ _  ___ _ __   ___| |_ _  ___  | |_ _ __ ___  ___
# | '_ \| '_ \| | | | |/ _ \ / _` |/ _ \ '_ \ / _ \ __| |/ __| | __| '__/ _ \/ _ \
# | |_) | | | | |_| | | (_) | (_| |  __/ | | |  __/ |_| | (__  | |_| | |  __/  __/
# | .__/|_| |_|\__, |_|\___/ \__, |\___|_| |_|\___|\__|_|\___|  \__|_|  \___|\___|
# | |           __/ |         __/ |
# |_|          |___/         |___/
#
#
# nf-core/ampliseq phylogenetic tree generation
# february 2025
# sources:
# https://yulab-smu.top/treedata-book/chapter2.html
# https://yulab-smu.top/treedata-book/related-tools.html#plotly
#
#
#   +----------------------------+
#   |  Load libraries & data     |
#   +----------------------------+
#
message("Starting R script...")
# Import libraries
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(ggtree)
# Set vars (rectal cancer)
# dir = "rectal_cancer"
# dada2_asv_tax = "ASV_tax.silva_138.tsv" # name changes depending on database used
# meta_filename = "Metadata.tsv"
# condition_col = "condition"
# results_path = "/home/camilla.callierotti/microbiome/tree_annotation_script/trees/"
# set vars (ampliseq test profile)
dir = "pipeline_test"
dada2_asv_tax = "ASV_tax.gtdb_R07-RS207.tsv"# (file for pipeline_test dir)
meta_filename = "Metadata.tsv"
condition_col = "treatment1"
results_path = "~/ampliseq_phylogenetic_tree/trees/"
# Load Newick tree
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
message("Newick tree loaded.")
# Load taxonomy_qza
#
# taxonomy_qza <- qiime2R::read_qza(paste0("data/",dir,"/taxonomy.qza"))$data
# max_levels <- max(stringr::str_count(taxonomy_qza$Taxon, ";")) + 1
# taxonomy <- taxonomy_qza %>%
#   rename(ASV = Feature.ID, Taxonomy = Taxon) %>%
#   select(ASV, Taxonomy) %>%
#   tidyr::separate(Taxonomy, into = paste0("Rank", 1:max_levels), sep = ";", fill = "right")
# Load and prepare metadata
meta <- fread(paste0("data/",dir,"/",meta_filename))
feature <- fread(paste0("data/",dir,"/feature-table.tsv"))
asv_species <- fread(paste0("data/",dir,"/",dada2_asv_tax))
asv_species[asv_species == ""] <- NA
asv_species$taxonomy <- apply(asv_species[, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")], 1, function(row) paste(na.omit(row), collapse = "; ")) # create taxonomy string
asv_species <- asv_species[asv_species$ASV_ID %in% tree$tip.label]
asv_species$Phylum[is.na(asv_species$Phylum)] <- "Unknown Phylum"
message("Metadata loaded and prepared.")
#
#   +--------------------+
#   |      FUNCTIONS     |
#   +--------------------+
#
# Update tip labels with taxonomy
tip_labels_to_taxonomy <- function(tree, asv_species) {
tree$ASV <- tree$tip.label # Keep original ASVs
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # Replace labels with taxonomy
return(tree)
}
# Revert tip labels back to ASVs
tip_labels_to_asv <- function(tree) {
if (!"ASV" %in% names(tree)) {
stop("The tree does not contain ASV labels. Make sure to have run update_tip_labels first.")
}
tree$tip.label <- tree$ASV
return(tree)
}
# Change tip labels to ASV taxonomy
tree <- tip_labels_to_taxonomy(tree, asv_species)
# Colour tree by phylum
phyla_list <- list()
for (phylum in unique(asv_species$Phylum)) {
taxonomies <- asv_species$taxonomy[asv_species$Phylum == phylum]
phyla_list[[phylum]] <- taxonomies
}
# Create ggtree object
tree_coloured <- groupOTU(tree, phyla_list, 'Phylum')
t1 <- ggtree(tree_coloured, layout = 'daylight', branch.length = 'none', size = 1.5) +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
message("Created first tree.")
# Save tree
ggsave(paste0(results_path,"tree_phyla.pdf"), width = 100, height = 100, units = "cm", limitsize = FALSE)
message("Saved first tree.")
#
#   +--------------------------------------------+
#   |    TREE 2 - Circular tree with heatmap     |
#   +--------------------------------------------+
#
# Create heatmap dataframe (from feature table using ASVs for join)
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
merged_feature_mean <- merged_feature[, .(mean_abund = mean(abundance)), by = .(`#OTU ID`, treatment1)] # compute mean abundace for otu and treatment (not sample)
heatmap <- dcast(merged_feature_mean, `#OTU ID` ~ treatment1, value.var = "mean_abund", fill = 0)
heatmap[`#OTU ID` %in% tree$ASV] # check that all OTUs in the heatmap are in the tree and vice versa
#heatmap[, 2:3] <- lapply(heatmap[, 2:3], as.numeric)
heatmap_matrix <- as.matrix(heatmap[, -1])
rownames(heatmap_matrix) <- heatmap$`#OTU ID`
message("Created heatmap for second tree.")
# Change tip labels back to ASVs
tree <- tip_labels_to_asv(tree)
# Create ggtree object
circ <- ggtree(tree, layout = "circular", branch.length = 'none')
circ_heatmap <- gheatmap(circ, heatmap_matrix, offset=0, width=.2,
colnames_angle=95, colnames_offset_y = .25) +
scale_fill_gradient(low = "#C6D4F9", high = "#F1A7C2", name="Abundance")
circ_heatmap
message("Created second tree.")
# Save tree
ggsave(paste0(results_path,"tree_heatmap.pdf"), plot = circ_heatmap, width = 100, height = 100, units = "cm", limitsize = FALSE)
message("Saved second tree.")
# Convert to plotly object
plotly::ggplotly(circ) # not working for circular trees
horiz <- ggtree(tree) + theme_tree2()
asv_species
tree$tip.label
tree <- tip_labels_to_taxonomy(tree, asv_species)
tree
tree
horiz$data$tooltip <- horiz$data$label  # Map labels to tooltips
horiz
print(horiz)
horiz$data
tree
horiz <- ggtree(tree) + theme_tree2()
horiz$data
horiz$data$tooltip <- horiz$data$label  # Map labels to tooltips
horiz$data
ggplotly(horiz, tooltip = "tooltip")
library(ggplotly)
library(ggplot2)
library(ggtree)
ggplotly(horiz, tooltip = "tooltip")
plotly::ggplotly(horiz, tooltip = "tooltip")
plotly::ggplotly(horiz, tooltip = "label")
tree_data <- horiz$data
fig <- plot_ly(
data = tree_data,
x = ~x,
y = ~y,
type = "scatter",
mode = "markers",
text = ~label,  # Tooltip showing taxonomy
hoverinfo = "text"
)
# Add labels separately
fig <- fig %>% add_text(
x = tree_data$x,
y = tree_data$y,
text = tree_data$label,
textposition = "right"
)
fig
# Add labels separately
fig <- fig %>% add_text(
x = tree_data$x,
y = tree_data$y,
text = tree_data$label,
textposition = "right"
)
fig <- plot_ly(
data = tree_data,
x = ~x,
y = ~y,
type = "scatter",
mode = "markers",
text = ~label,  # Tooltip showing taxonomy
hoverinfo = "text"
)
fig <- plotly::plot_ly(
data = tree_data,
x = ~x,
y = ~y,
type = "scatter",
mode = "markers",
text = ~label,  # Tooltip showing taxonomy
hoverinfo = "text"
)
# Add labels separately
fig <- fig %>% add_text(
x = tree_data$x,
y = tree_data$y,
text = tree_data$label,
textposition = "right"
)
# Add labels separately
fig <- fig %>% plotly::add_text(
x = tree_data$x,
y = tree_data$y,
text = tree_data$label,
textposition = "right"
)
fig
# Separate edges (branches) from tip points
edges <- tree_data %>% filter(!is.na(parent))  # Exclude root
tips <- tree_data %>% filter(isTip)  # Extract tips
# Create interactive plot with edges
fig <- plot_ly() %>%
add_segments(
data = edges,
x = ~x, xend = ~xend,
y = ~y, yend = ~yend,
line = list(color = 'black')
) %>%
add_markers(
data = tips,
x = ~x, y = ~y,
text = ~label,  # Tooltip displays taxonomy
hoverinfo = "text",
marker = list(size = 5, color = 'blue')
) %>%
add_text(
data = tips,
x = ~x, y = ~y,
text = ~label,
textposition = "right",
showlegend = FALSE
) %>%
layout(
xaxis = list(title = "Evolutionary Distance", zeroline = FALSE),
yaxis = list(title = "", showticklabels = FALSE)
)
# Create interactive plot with edges
fig <- plotly::plot_ly() %>%
add_segments(
data = edges,
x = ~x, xend = ~xend,
y = ~y, yend = ~yend,
line = list(color = 'black')
) %>%
add_markers(
data = tips,
x = ~x, y = ~y,
text = ~label,  # Tooltip displays taxonomy
hoverinfo = "text",
marker = list(size = 5, color = 'blue')
) %>%
add_text(
data = tips,
x = ~x, y = ~y,
text = ~label,
textposition = "right",
showlegend = FALSE
) %>%
layout(
xaxis = list(title = "Evolutionary Distance", zeroline = FALSE),
yaxis = list(title = "", showticklabels = FALSE)
)
fig  # Display the interactive phylogenetic tree
