#       | |         | |                           | | (_)      | |
#  _ __ | |__  _   _| | ___   __ _  ___ _ __   ___| |_ _  ___  | |_ _ __ ___  ___
# | '_ \| '_ \| | | | |/ _ \ / _` |/ _ \ '_ \ / _ \ __| |/ __| | __| '__/ _ \/ _ \
# | |_) | | | | |_| | | (_) | (_| |  __/ | | |  __/ |_| | (__  | |_| | |  __/  __/
# | .__/|_| |_|\__, |_|\___/ \__, |\___|_| |_|\___|\__|_|\___|  \__|_|  \___|\___|
# | |           __/ |         __/ |
#
#   +----------------------------+
#   |  Load libraries & data     |
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(ggtree)
library(plotly)
dir = "pipeline_test"
condition_col = "treatment1"
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
taxonomy_qza <- qiime2R::read_qza(paste0("data/",dir,"/taxonomy.qza"))$data
max_levels <- max(stringr::str_count(taxonomy_qza$Taxon, ";")) + 1
taxonomy <- taxonomy_qza %>%
rename(ASV = Feature.ID, Taxonomy = Taxon) %>%
select(ASV, Taxonomy) %>%
tidyr::separate(Taxonomy, into = paste0("Rank", 1:max_levels), sep = ";", fill = "right")
meta <- fread(paste0("data/",dir,"/Metadata.tsv"))
feature <- fread(paste0("data/",dir,"/feature-table.tsv"))
asv_species <- fread(paste0("data/",dir,"/ASV_tax.gtdb_R07-RS207.tsv"))
#
#   +----------------------------+
#   |  TREE 1 - Basic tree       |
asv_species[asv_species == ""] <- NA
dat <- asv_species[, .(ASV_ID,
taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; ")),
by = ASV_ID]
dat <- dat[, .(ASV_ID, taxonomy)]
grp <- asv_species[, .(asv_species$ASV, asv_species$Phylum)]
names(grp) <- c("ASV_ID", "Phylum")
grp$Phylum[is.na(grp$Phylum)] <- "Unknown Phylum"
grp <- grp[grp$ASV_ID %in% tree$tip.label, ]
all(grp$ASV_ID %in% tree$tip.label) # ensure matching asvs
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, grp, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
data(iris)
rn <- paste0(iris[,5], "_", 1:150)
rownames(iris) <- rn
d_iris <- dist(iris[,-5], method="man")
tree_iris <- ape::bionj(d_iris)
grp <- list(setosa     = rn[1:50],
versicolor = rn[51:100],
virginica  = rn[101:150])
p_iris <- ggtree(tree_iris, layout = 'circular', branch.length='none')
groupOTU(p_iris, grp, 'Species') + aes(color=Species) +
theme(legend.position="right")
grp
View(grp)
grp_list <- split(grp$ASV_ID, grp$Phylum)
asv_species[asv_species == ""] <- NA
dat <- asv_species[, .(ASV_ID,
taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; ")),
by = ASV_ID]
dat <- dat[, .(ASV_ID, taxonomy)]
grp <- asv_species[, .(asv_species$ASV, asv_species$Phylum)]
names(grp) <- c("ASV_ID", "Phylum")
grp$Phylum[is.na(grp$Phylum)] <- "Unknown Phylum"
grp <- grp[grp$ASV_ID %in% tree$tip.label, ]
all(grp$ASV_ID %in% tree$tip.label) # ensure matching asvs
grp_list <- split(grp$ASV_ID, grp$Phylum)
View(grp_list)
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, grp_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
interactive_tree <- ggplotly(t1_coloured)
interactive_tree
View(interactive_tree)
plot_ly(x = 1:10, y = 1:10)
warnings()
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(aes(label = taxonomy), data = label_map, size = 6)
label_map <- asv_species[, .(ASV_ID,
taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; ")),
by = ASV_ID]
label_map <- label_map[, .(ASV_ID, taxonomy)]
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(aes(label = taxonomy), data = label_map, size = 6)
t1
tree_data <- as_tibble(tree)
# Ensure label_map has correct mapping
label_map <- data.frame(
label = tree$tip.label,    # Original tip labels
taxonomy = paste0("Taxon_", seq_along(tree$tip.label)) # Replace with actual taxonomy info
)
# Merge label_map with tree_data
tree_data <- tree_data %>%
left_join(label_map, by = "label")
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size = 1.5) +
geom_tiplab(aes(label = taxonomy), data = tree_data, size = 6)
t1
# Colour tree by phylum
grp <- asv_species[, .(asv_species$ASV, asv_species$Phylum)]
names(grp) <- c("ASV_ID", "Phylum")
grp$Phylum[is.na(grp$Phylum)] <- "Unknown Phylum"
grp <- grp[grp$ASV_ID %in% tree$tip.label, ]
all(grp$ASV_ID %in% tree$tip.label) # ensure matching asvs
grp_list <- split(grp$ASV_ID, grp$Phylum) # grp must be a list of vectors
# Change tip labels to ASV taxonomy
asv_species[asv_species == ""] <- NA
label_map <- asv_species[, .(ASV_ID,
taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; ")),
by = ASV_ID]
label_map <- label_map[, .(ASV_ID, taxonomy)]
# Create ggtree object
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(aes(label = taxonomy), data = label_map, size = 6)
t1_coloured <- groupOTU(t1, grp_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, grp_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
ggsave("trees/circular_tree.pdf", width = 100, height = 100, units = "cm", limitsize = FALSE)
t1_coloured
asv_species[asv_species == ""] <- NA
label_map <- asv_species[, .(ASV_ID,
taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; ")),
by = ASV_ID]
label_map <- label_map[, .(ASV_ID, taxonomy)]
View(label_map)
label_map <- label_map[label_map$ASV_ID %in% tree$tip.label, ]
tree$tip.label <- label_map$taxonomy
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
tree$tip.label <- label_map$taxonomy[match(tree$tip.label, label_map$ASV_ID)]
tree[["tip.label"]]
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, grp_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1
t1_coloured <- groupOTU(t1, grp_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
grp <- asv_species[, .(asv_species$ASV, asv_species$Phylum)]
names(grp) <- c("ASV_ID", "Phylum")
grp$Phylum[is.na(grp$Phylum)] <- "Unknown Phylum"
grp <- grp[grp$ASV_ID %in% tree$tip.label, ]
all(grp$ASV_ID %in% tree$tip.label) # ensure matching asvs
grp_list <- split(grp$ASV_ID, grp$Phylum) # grp must be a list of vectors
View(grp_list)
# Import libraries
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(ggtree)
# Set vars
dir = "pipeline_test"
condition_col = "treatment1"
# Load Newick tree
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
# Load taxonomy_qza
taxonomy_qza <- qiime2R::read_qza(paste0("data/",dir,"/taxonomy.qza"))$data
max_levels <- max(stringr::str_count(taxonomy_qza$Taxon, ";")) + 1
taxonomy <- taxonomy_qza %>%
rename(ASV = Feature.ID, Taxonomy = Taxon) %>%
select(ASV, Taxonomy) %>%
tidyr::separate(Taxonomy, into = paste0("Rank", 1:max_levels), sep = ";", fill = "right")
# Load metadata
meta <- fread(paste0("data/",dir,"/Metadata.tsv"))
feature <- fread(paste0("data/",dir,"/feature-table.tsv"))
asv_species <- fread(paste0("data/",dir,"/ASV_tax.gtdb_R07-RS207.tsv"))
#
#   +----------------------------+
#   |  TREE 1 - Basic tree       |
#   +----------------------------+
#
# Colour tree by phylum
grp <- asv_species[, .(asv_species$ASV, asv_species$Phylum)]
names(grp) <- c("ASV_ID", "Phylum")
grp$Phylum[is.na(grp$Phylum)] <- "Unknown Phylum"
grp <- grp[grp$ASV_ID %in% tree$tip.label, ]
all(grp$ASV_ID %in% tree$tip.label) # ensure matching asvs
grp_list <- split(grp$ASV_ID, grp$Phylum) # grp must be a list of vectors
grp_list
asv_species[asv_species == ""] <- NA
label_map <- asv_species[, .(ASV_ID,
taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; ")),
by = ASV_ID]
label_map <- label_map[, .(ASV_ID, taxonomy)]
label_map <- label_map[label_map$ASV_ID %in% tree$tip.label, ]
tree$tip.label <- label_map$taxonomy[match(tree$tip.label, label_map$ASV_ID)]
tree$tip.label
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
asv_species[asv_species == ""] <- NA
label_map <- asv_species[, .(ASV_ID,
taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; ")),
by = ASV_ID]
label_map <- label_map[, .(ASV_ID, taxonomy)]
label_map <- label_map[label_map$ASV_ID %in% tree$tip.label, ]
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- label_map$taxonomy[match(tree$tip.label, label_map$ASV_ID)]
grp <- asv_species[, .(asv_species$ASV, asv_species$Phylum)]
names(grp) <- c("ASV_ID", "Phylum")
grp$Phylum[is.na(grp$Phylum)] <- "Unknown Phylum"
grp <- grp[grp$ASV_ID %in% tree$tip.label, ]
all(grp$ASV_ID %in% tree$tip.label) # ensure matching asvs
grp_list <- split(grp$ASV_ID, grp$Phylum) # grp must be a list of vectors
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, grp_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
grp <- split(asv_species$Phylum, taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; ")))
grp <- split(asv_species$Phylum, taxonomy = paste(na.omit(c(Kingdom, Phylum, Class, Order, Family, Genus, Species)), collapse = "; "))
head(asv_species)
asv_species$taxonomy <- apply(asv_species, 1, function(row) paste(na.omit(row), collapse = "; ")) # create taxonomy strings fo al
asv_species$taxonomy <- apply(asv_species[, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")], 1, function(row) paste(na.omit(row), collapse = "; ")) # create taxonomy string
tree$tip.label
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
asv_species[asv_species$ASV_ID %in% tree$tip.label]
asv_species <- asv_species[asv_species$ASV_ID %in% tree$tip.label]
label_map <- label_map[, .(ASV_ID, taxonomy)]
phyla_list <- list()
for (phylum in unique(asv_species$Phylum)) {
# Get the taxonomies for each Phylum
taxonomies <- asv_species$taxonomy[df$Phylum == phylum]
# Store the list of taxonomies in the corresponding phylum
phyla_list[[phylum]] <- taxonomies
}
for (phylum in unique(asv_species$Phylum)) {
# Get the taxonomies for each Phylum
taxonomies <- asv_species$taxonomy[asv_species$Phylum == phylum]
# Store the list of taxonomies in the corresponding phylum
phyla_list[[phylum]] <- taxonomies
}
View(phyla_list)
asv_species[asv_species == ""] <- NA
for (phylum in unique(asv_species$Phylum)) {
# Get the taxonomies for each Phylum
taxonomies <- asv_species$taxonomy[asv_species$Phylum == phylum]
# Store the list of taxonomies in the corresponding phylum
phyla_list[[phylum]] <- taxonomies
}
phyla_list <- list()
for (phylum in unique(asv_species$Phylum)) {
# Get the taxonomies for each Phylum
taxonomies <- asv_species$taxonomy[asv_species$Phylum == phylum]
# Store the list of taxonomies in the corresponding phylum
phyla_list[[phylum]] <- taxonomies
}
unique(asv_species$Phylum)
asv_species$Phylum[is.na(asv_species$Phylum)] <- "Unknown Phylum"
phyla_list <- list()
for (phylum in unique(asv_species$Phylum)) {
# Get the taxonomies for each Phylum
taxonomies <- asv_species$taxonomy[asv_species$Phylum == phylum]
# Store the list of taxonomies in the corresponding phylum
phyla_list[[phylum]] <- taxonomies
}
View(phyla_list)
phyla_list[["Margulisbacteria"]]
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, grp_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
phyla_list
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
class(phyla_list)
str(phyla_list)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
str(phyla_list)
phyla_vector <- character(length = length(tree$tip.label))
phyla_vector <- character(length = length(tree$tip.label))
for (i in seq_along(tree$tip.label)) {
# Get the ASV ID from the tip label
asv_id <- tree$tip.label[i]
# Find the corresponding Phylum for this ASV from asv_species (assuming 'ASV_ID' is the matching column)
phylum <- asv_species$Phylum[asv_species$ASV_ID == asv_id]
# Assign the found phylum to the phyla_vector
phyla_vector[i] <- phylum
}
t1_coloured <- groupOTU(t1, phyla_vector, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
for (i in seq_along(tree$tip.label)) {
# Get the ASV ID from the tip label
asv_id <- tree$tip.label[i]
# Find the corresponding Phylum for this ASV from asv_species (assuming 'ASV_ID' is the matching column)
phylum <- asv_species$Phylum[asv_species$ASV_ID == asv_id]
# Assign the found phylum to the phyla_vector
phyla_vector[i] <- phylum
}
t1_coloured <- groupOTU(t1, phyla_vector, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
phyla_vector
phyla_list
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
data(iris)
rn <- paste0(iris[,5], "_", 1:150)
rownames(iris) <- rn
d_iris <- dist(iris[,-5], method="man")
tree_iris <- ape::bionj(d_iris)
grp <- list(setosa     = rn[1:50],
versicolor = rn[51:100],
virginica  = rn[101:150])
p_iris <- ggtree(tree_iris, layout = 'circular', branch.length='none')
groupOTU(p_iris, grp, 'Species') + aes(color=Species) +
theme(legend.position="right")
grp
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
tree$tip.label
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # change tip label to taxonomy
tree$tip.label
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "treatment1")] # compute mean for otu/treatment pair
heatmap <- dcast(heatmap, `#OTU ID` ~ treatment1, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap[`#OTU ID` %in% tree$ASV] # check that all OTUs in the heatmap are in the tree and vice versa
tree$ASV
heatmap[, 2:3] <- lapply(heatmap[, 2:3], as.numeric)
heatmap_matrix <- as.matrix(heatmap[, -1])
rownames(heatmap_matrix) <- heatmap$`#OTU ID`
circ <- ggtree(tree, layout = "circular", branch.length = 'none')
circ_heatmap <- gheatmap(circ, heatmap_matrix, offset=0, width=.2,
colnames_angle=95, colnames_offset_y = .25) +
scale_fill_gradient(low = "#C6D4F9", high = "#F1A7C2", name="Abundance")
circ_heatmap
tree$tip.label <- tree$ASV
circ <- ggtree(tree, layout = "circular", branch.length = 'none')
circ_heatmap <- gheatmap(circ, heatmap_matrix, offset=0, width=.2,
colnames_angle=95, colnames_offset_y = .25) +
scale_fill_gradient(low = "#C6D4F9", high = "#F1A7C2", name="Abundance")
circ_heatmap
ggsave("trees/tree_heatmap.pdf", width = 100, height = 100, units = "cm", limitsize = FALSE)
ggsave("trees/tree_phyla.pdf", width = 100, height = 100, units = "cm", limitsize = FALSE)
dada2_asv_tax = "ASV_tax.silva_138.tsv"
paste0("data/",dir,"/",dada2_asv_tax)
feature_tab = "feature-table.tsv" # this has the same name from ampliseq
dir = "rectal_cancer"
# Import libraries
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(ggtree)
# Set vars
dir = "pipeline_test"
#dada2_asv_tax = "ASV_tax.silva_138.tsv" # name changes depending on database used
dada2_asv_tax = "ASV_tax.gtdb_R07-RS207.tsv"
meta_filename = "Metadata.tsv"
condition_col = "treatment1"
metadata_id = "ID"
# Load Newick tree
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
# Load taxonomy_qza
meta <- fread(paste0("data/",dir,"/",meta_filename))
feature <- fread(paste0("data/",dir,"/feature-table.tsv"))
asv_species <- fread(paste0("data/",dir,"/",dada2_asv_tax))
asv_species[asv_species == ""] <- NA
asv_species$taxonomy <- apply(asv_species[, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")], 1, function(row) paste(na.omit(row), collapse = "; ")) # create taxonomy string
asv_species <- asv_species[asv_species$ASV_ID %in% tree$tip.label]
asv_species$Phylum[is.na(asv_species$Phylum)] <- "Unknown Phylum"
#
#   +----------------------------+
#   |  TREE 1 - Basic tree       |
#   +----------------------------+
#
# Change tip labels to ASV taxonomy
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # change tip label to taxonomy
# Colour tree by phylum
phyla_list <- list()
for (phylum in unique(asv_species$Phylum)) {
taxonomies <- asv_species$taxonomy[asv_species$Phylum == phylum]
phyla_list[[phylum]] <- taxonomies
}
# Create ggtree object
t1 <- ggtree(tree, layout = 'daylight', branch.length = 'none', size=1.5) + geom_tiplab(size = 6)
t1_coloured <- groupOTU(t1, phyla_list, 'Phylum') +
aes(color = Phylum) +
theme(legend.position = "right", legend.text = element_text(size = 6))
t1_coloured
ggsave("trees/tree_phyla.pdf", plot = t1_coloured, width = 100, height = 100, units = "cm", limitsize = FALSE)
ggsave("trees/tree_phyla.pdf", width = 100, height = 100, units = "cm", limitsize = FALSE)
save_plot("trees/tree_phyla.pdf", t1_coloured)
save_plot("/home/camilla.callierotti/microbiome/tree_annotation_script", t1_coloured)
ggsave("/home/camilla.callierotti/microbiome/tree_annotation_script", width = 100, height = 100, units = "cm", limitsize = FALSE)
paste0(results_path,"tree_phyla.pdf")
results_path = "/home/camilla.callierotti/microbiome/tree_annotation_script/trees/"
paste0(results_path,"tree_phyla.pdf")
# Create heatmap dataframe (from feature table using ASVs for join)
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = metadata_id, all.x = TRUE) # merge with treatment
condition_col
metadata_id
feature_long
feature
feature
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = metadata_id, value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = metadata_id, all.x = TRUE) # merge with treatment
head(meta)
metadata_id
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = "ID", all.x = TRUE) # merge with treatment
names(meta)
names(feature_long)
meta$ID
feature_long$ID
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = metadata_id, value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = metadata_id, all.x = TRUE) # merge with treatment
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", metadata_id)] # compute mean for otu/treatment pair
metadata_id
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = "ID", all.x = TRUE) # merge with treatment
merged_feature <- merge(feature_long, meta[, .(metadata_id, condition_col)], by = "ID", all.x = TRUE) # merge with treatment
feature_long
meta
merged_feature <- merge(feature_long, meta[, .("ID", condition_col)], by = "ID", all.x = TRUE) # merge with treatment
condition_col
meta
merged_feature <- merge(feature_long, meta[, .("ID", "treatment1")], by = "ID", all.x = TRUE) # merge with treatment
merged_feature <- merge(feature_long, meta[, .("ID", "treatment1")], by = "ID", all.x = TRUE) # merge with treatment
feature_long
meta
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
heatmap <- dcast(heatmap, `#OTU ID` ~ condition_col, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- dcast(heatmap, `#OTU ID` ~ treatment1, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- dcast(heatmap, "#OTU ID" ~ "treatment1", value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- dcast(heatmap, `#OTU ID` ~ condition_col, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
heatmap <- dcast(heatmap, `#OTU ID` ~ condition_col, value.var = "mean_abund", fill = 0) # reshape back to wide format
str(heatmap)
heatmap[duplicated(heatmap[, .(ID = `#OTU ID`, condition_col)]), ]
sapply(heatmap, length)
str(heatmap)
condition_col
heatmap <- dcast(heatmap, `#OTU ID` ~ abundance, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- dcast(heatmap, `#OTU ID` ~ "abundance", value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
heatmap <- dcast(heatmap, `#OTU ID` ~ mean_abund, value.var = "mean_abund", fill = 0) # reshape back to wide format
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
heatmap
df2 <- as.data.frame(matrix(rnorm(39), ncol=3))
df2
df2 <- as.data.frame(matrix(rnorm(39), ncol=3))
rownames(df2) <- tree$tip.label
df2
View(df2)
nwk <- system.file("extdata", "sample.nwk", package="treeio")
test_tree <- read.tree(nwk)
df2 <- as.data.frame(matrix(rnorm(39), ncol=3))
rownames(df2) <- test_tree$tip.label
colnames(df2) <- LETTERS[1:3]
df2
class(df2)
heatmap <- merged_feature[, .(mean_abund = mean(abundance, na.rm = TRUE)), by = c("#OTU ID", "ID")] # compute mean for otu/treatment pair
feature_long <- melt(feature, id.vars = "#OTU ID", variable.name = "ID", value.name = "abundance") # reshape to long format
merged_feature <- merge(feature_long, meta[, .(ID, treatment1)], by = "ID", all.x = TRUE) # merge with treatment
head(merged_feature)
merged_feature_mean <- merged_feature[, .(mean_abund = mean(abundance)), by = .(ID, `#OTU ID`, treatment1)] # compute mean abundace for otu and treatment
View(merged_feature_mean)
merged_feature_mean <- merged_feature[, .(mean_abund = mean(abundance)), by = .(`#OTU ID`, treatment1)] # compute mean abundace for otu and treatment
heatmap <- dcast(merged_feature_mean, `#OTU ID` ~ treatment1, value.var = "mean_abund", fill = 0)
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
heatmap[`#OTU ID` %in% tree$ASV] # check that all OTUs in the heatmap are in the tree and vice versa
tree$ASV
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # change tip label to taxonomy
tree$tip.label <- tree$ASV
tree <- read.tree(paste0("data/",dir,"/tree.nwk"))
tree$ASV <- tree$tip.label # keep ASVs in different object
tree$tip.label <- asv_species$taxonomy[match(tree$tip.label, asv_species$ASV_ID)] # change tip label to taxonomy
heatmap[`#OTU ID` %in% tree$ASV] # check that all OTUs in the heatmap are in the tree and vice versa
heatmap
#heatmap[, 2:3] <- lapply(heatmap[, 2:3], as.numeric)
heatmap_matrix <- as.matrix(heatmap[, -1])
rownames(heatmap_matrix) <- heatmap$`#OTU ID`
heatmap_matrix
tree$tip.label <- tree$ASV
circ <- ggtree(tree, layout = "circular", branch.length = 'none')
circ_heatmap <- gheatmap(circ, heatmap_matrix, offset=0, width=.2,
colnames_angle=95, colnames_offset_y = .25) +
scale_fill_gradient(low = "#C6D4F9", high = "#F1A7C2", name="Abundance")
circ_heatmap
ggsave(paste0(results_path,"tree_heatmap.pdf"), plot = circ_heatmap, width = 100, height = 100, units = "cm", limitsize = FALSE)
